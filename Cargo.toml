[package]
name = "tetris"
version = "0.0.2"
# https://github.com/bevyengine/bevy/issues/3205#issuecomment-980637677
edition = "2021"
authors = ["Ziloka <50429450+ziloka@users.noreply.github.com>"]

[dependencies]
bevy = "0.11"
lazy_static = "1.4.0"
scrap = "0.5"
rand = "0.8"

# https://bevy-cheatbook.github.io/setup/bevy-config.html
# https://docs.rs/crate/bevy/0.11.0/features
# [dependencies.bevy]
# version = "0.11"
# # Disable the default features if there are any that you do not want
# default-features = false
# features = [
#   # These are the default features:
#   # (re-enable whichever you like)

#   # Bevy functionality:
#   "multi-threaded",     # Run with multithreading
#   "bevy_asset",         # Assets management
#   #"bevy_audio",         # Builtin audio
#   #"bevy_gilrs",         # Gamepad input support
#   "bevy_scene",         # Scenes management
#   "bevy_winit",         # Window management
#   "bevy_render",        # Rendering framework core
#   "bevy_core_pipeline", # Common rendering abstractions
#   "bevy_gizmos",        # Support drawing debug lines and shapes
#   "bevy_sprite",        # 2D (sprites) rendering
# #   "bevy_pbr",           # 3D (physically-based) rendering
# #   "bevy_gltf",          # GLTF 3D assets format support
#   "bevy_text",          # Text/font rendering
#   "bevy_ui",            # UI toolkit
# #   "animation",          # Animation support
# #   "tonemapping_luts",   # Support different camera Tonemapping modes (embeds extra data)
#   "filesystem_watcher", # Asset hot-reloading
# #   "default_font",       # Embed a minimal default font for text/UI

#   # File formats:
# #   "png",    # PNG image format for simple 2D images
# #   "hdr",    # HDR images
# #   "ktx2",   # Preferred format for GPU textures
# #   "zstd",   # ZSTD compression support in KTX2 files
# #   "vorbis", # Audio: OGG Vorbis

#   # Platform-specific:
#   "x11",                   # Linux: Support X11 windowing system
# #   "android_shared_stdcxx", # Android: use shared C++ library
# #   "webgl2",                # Web: use WebGL2 instead of WebGPU

#   # These are other features that may be of interest:
#   # (add any of these that you need)

#   # Bevy functionality:
# #   "subpixel_glyph_atlas", # Subpixel antialiasing for text/fonts
# #   "serialize",            # Support for `serde` Serialize/Deserialize

#   # File formats:
# #   "dds",  # Alternative DirectX format for GPU textures, instead of KTX2
# #   "jpeg", # JPEG lossy format for 2D photos
# #   "webp", # WebP image format
# #   "bmp",  # Uncompressed BMP image format
# #   "tga",  # Truevision Targa image format
# #   "exr",  # OpenEXR advanced image format
# #   "pnm",  # PNM (pam, pbm, pgm, ppm) image format
# #   "basis-universal", # Basis Universal GPU texture compression format
# #   "zlib", # zlib compression support in KTX2 files
# #   "flac", # Audio: FLAC lossless format
# #   "mp3",  # Audio: MP3 format (not recommended)
# #   "wav",  # Audio: Uncompressed WAV
# #   "symphonia-all", # All Audio formats supported by the Symphonia library
# #   "shader_format_glsl", # GLSL shader support
# #   "shader_format_spirv", # SPIR-V shader support

#   # Platform-specific:
#   "wayland",              # (Linux) Support Wayland windowing system
# #   "accesskit_unix",       # (Unix-like) AccessKit integration for UI Accessibility
# #   "bevy_dynamic_plugin",  # (Desktop) support for loading of `DynamicPlugin`s

#   # Development/Debug features:
# #   "dynamic_linking", # Dynamic linking for faster compile-times
# #   "trace",           # Enable tracing for performance measurement
# #   "detailed_trace",  # Make traces more verbose
# #   "trace_tracy",     # Tracing using `tracy`
# #   "trace_tracy_memory", # + memory profiling
# #   "trace_chrome",    # Tracing using the Chrome format
# #   "wgpu_trace",      # WGPU/rendering tracing
# ]

# https://bevy-cheatbook.github.io/platforms/wasm.html
[target.wasm32-unknown-unknown]
runner = "wasm-server-runner"

[profile.wasm-release]
# Use release profile as default values
inherits = "release"

# Optimize with size in mind, also try "s", sometimes it is better.
# This doesn't increase compilation times compared to -O3, great improvements
opt-level = "z"

# Do a second optimization pass removing duplicate or unused code from dependencies.
# Slows compile times, marginal improvements
lto = "fat"

# When building crates, optimize larger chunks at a time
# Slows compile times, marginal improvements
codegen-units = 1

# Enable a small amount of optimization in debug mode
# [profile.dev]
# opt-level = 1

# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
opt-level = 3
